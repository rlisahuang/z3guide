"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4026],{213:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>u,toc:()=>d});var i=n(3117),s=(n(7294),n(3905)),o=n(7634),r=n.n(o);const a={title:"Recursive Functions",sidebar_position:7},l=void 0,u={unversionedId:"logic/Recursive Functions",id:"logic/Recursive Functions",title:"Recursive Functions",description:"SMTLIB2 standard: Page 62",source:"@site/docs-smtlib/01 - logic/07 - Recursive Functions.md",sourceDirName:"01 - logic",slug:"/logic/Recursive Functions",permalink:"/z3guide/docs/logic/Recursive Functions",draft:!1,editUrl:"https://github.com/rlisahuang/z3guide/tree/main/website/docs-smtlib/01 - logic/07 - Recursive Functions.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Recursive Functions",sidebar_position:7},sidebar:"smtlibSidebar",previous:{title:"Lambdas",permalink:"/z3guide/docs/logic/Lambdas"},next:{title:"Conclusion",permalink:"/z3guide/docs/logic/Conclusion"}},c={},d=[{value:"Mutually Recursive Functions",id:"mutually-recursive-functions",level:2}],f={toc:d};function m(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,i.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"}," ",(0,s.kt)("strong",{parentName:"p"},"SMTLIB2")," standard: ",(0,s.kt)("a",{parentName:"p",href:"http://smtlib.cs.uiowa.edu/papers/smt-lib-reference-v2.6-r2021-05-12.pdf"},"Page 62"))),(0,s.kt)("p",null,"You can define recursive functions"),(0,s.kt)(r(),{input:{lang:"z3",highlight:"clojure",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:"(define-fun-rec length ((ls (List Int))) Int\n   (if ((_ is nil) ls) 0 (+ 1 (length (tail ls)))))\n\n(define-fun-rec nat-list ((ls (List Int))) Bool \n   (if ((_ is nil) ls)\n       true\n       (and (>= (head ls) 0) (nat-list (tail ls)))))\n\n(declare-const list1 (List Int))\n(declare-const list2 (List Int))\n(assert (> (length list1) (length list2)))\n(assert (not (nat-list list2)))\n(assert (nat-list list1))\n(check-sat)\n(get-model)",result:{output:"sat\n(\n  (define-fun list2 () (List Int)\n    (insert (- 1) nil))\n  (define-fun list1 () (List Int)\n    (insert 0 (insert 21238 nil)))\n)\n",error:"",status:"z3-ran",hash:"123f1da134ffe7f1aac1a19ae6ffad1b8298c68d"},githubRepo:"Z3Prover/z3",editable:!1,readonly:!1,showLineNumbers:!0,langVersion:"4.11.0",tool:"z3-solver"},mdxType:"CustomCodeBlock"}),(0,s.kt)("p",null,"Z3 unfolds the definition of recursive functions incrementally by iterative deepening:\nit attempts first to establish satisfiabiltiy modulo a fixed bound on number of unfoldings;\nif the resulting formula is unsatisfiable ",(0,s.kt)("em",{parentName:"p"},"and")," the reason for unsatisfiability is due to the\nbound restriction, it increases the fixed bound incrementally. Note that this approach does not\ninvolve reasoning by induction that is often required to prove deeper properties of recursive functions.\nThis scheme allows to decide satisfiability and unsatisfiability for a limited, but often useful,\nclass of formulas."),(0,s.kt)("h2",{id:"mutually-recursive-functions"},"Mutually Recursive Functions"),(0,s.kt)("p",null,"You can also define functions that are mutually recursive.\nThe syntax requires to declare all functions first in one block, and then\ndefine the bodies of the recursive functions in a second block."),(0,s.kt)(r(),{input:{lang:"z3",highlight:"clojure",statusCodes:{success:"z3-ran",timeout:"z3-timed-out",runError:"z3-failed",runtimeError:"z3-runtime-error"},code:"(define-funs-rec \n   ((ping ((x Int) (y Bool)) Int)\n    (pong ((a Int) (b Bool)) Int))\n\n   ((if y (pong (+ x 1) (not y)) (- x 1))\n    (if b (ping (- a 1) (not b)) a)))\n\n(declare-const x Int)\n(assert (> x 0))\n(assert (> (ping x true) x))\n(check-sat)\n(get-model)",result:{output:"sat\n(\n  (define-fun x () Int\n    1)\n)\n",error:"",status:"z3-ran",hash:"79f3c4017698c294ee6d98c21b8947fb8deff01d"},githubRepo:"Z3Prover/z3",editable:!1,readonly:!1,showLineNumbers:!0,langVersion:"4.11.0",tool:"z3-solver"},mdxType:"CustomCodeBlock"}))}m.isMDXComponent=!0}}]);